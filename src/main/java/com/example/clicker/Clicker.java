package com.example.clicker;

import android.os.Bundle;
import android.os.Handler;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.TextView;
import androidx.fragment.app.Fragment;

import java.text.NumberFormat;
import pl.droidsonroids.gif.GifImageView;

/**
 * This fragment handles the production of "Lines of code"
 * Which can be generated by tapping the computer icon, they can also be
 * generated automatically later on when the player buys upgrades from the
 * stores in-game
 *
 * @author Aidan Wesloskie
 */


public class Clicker extends Fragment {
    private TextView currentAmountView; //Views
    private GifImageView mainButton;

    private double rate;
    private double currentAmount;
    private double tapValue;
    private int tapCount;
    private int totalLines;

    //Variables for automation
    private final int DELAY = 1000;
    private Handler handler = new Handler();
    private Runnable tick;

    private Animation buttonResponse;
    private MainActivity activity;
    private NumberFormat nf = NumberFormat.getInstance();

    public Clicker() {} //Keep Empty

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_clicker, container, false);
        loadValues(v);

        //Onclick that handles tap method and user feedback
        mainButton.setOnClickListener(v1 -> {
            tap();
            mainButton.startAnimation(buttonResponse);
        });

        //Handles automatic tapping
        tick = new Runnable() {
            @Override
            public void run() {
                currentAmount = activity.getCurrentAmount();
                currentAmountView.setText(nf.format((int) currentAmount));
                //Handler flag prevent multiple handlers from being created
                handler.postDelayed(this, DELAY);
            }
        };
        return v;
    }

    /**
     * Manages the manual tapping function
     */
    private void tap() {
        tapCount++;
        currentAmount = activity.getCurrentAmount();
        currentAmount += tapValue; //Adds new amount to total
        totalLines += tapValue;
        activity.setCurrentAmount(currentAmount);
        currentAmountView.setText(nf.format((int) currentAmount));
    }

    @Override
    public void onStart() {
        super.onStart();
        handler.postDelayed(tick, DELAY);
        mainButton.setBackgroundResource(activity.getComputerId());
    }

    @Override
    public void onResume() {
        super.onResume();
        mainButton.setBackgroundResource(activity.getComputerId());
    }

    /**
     * Loads all the values into the fragment as well as assigning each of the buttons
     * their individual values
     */
    private void loadValues(View v){
        activity = (MainActivity) getActivity();
        buttonResponse = AnimationUtils.loadAnimation(getContext(),
                                                    R.anim.button_response);
        rate = activity.getRate();
        currentAmount = activity.getCurrentAmount();
        tapValue = activity.getTapValue();
        tapCount = activity.getTapCount();
        totalLines = activity.getTotalLines();
        currentAmountView = v.findViewById(R.id.currentAmount);
        TextView currentRateView = v.findViewById(R.id.rate);
        currentRateView.setText(nf.format(rate));
        currentAmountView.setText(nf.format((int) currentAmount));
        mainButton = v.findViewById(R.id.clickButton);
    }

    @Override
    public void onStop() {
        super.onStop();
        save();
    }

    /**
     * Returns the newly modified data back to the Main activity for it to be stored
     */
    private void save() {
        activity.setTotalLines(totalLines);
        activity.setRate(rate);
        activity.setCurrentAmount(currentAmount);
        activity.setTapCount(tapCount);
        activity.setTapValue(tapValue);
    }

}